<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources location="file:///C:/Program Files/CODE/storage/" mapping="/storage/**" ></resources>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760"/>	
	</beans:bean>
	
	
	
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<beans:property name="maxUploadSize" value="10485760"/>	
	</beans:bean>
	
	<beans:bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!-- 트랜잭션 메서드 네임패턴 및 트랜잭션 정책	 -->	 
    <tx:advice id="txAdvice" transaction-manager="txManager">
    	<!-- 
    		isolation : 격리레벨
    					트랜잭션이 진행 중 일때 다른 session에서 작업 중인 테이블에 접근할 경우 어디까지 허용할 것 인가.
    		
	    		DEFAULT : 데이터베이스의 기본 격리레벨을 따라간다.
	    		
	    		READ_UNCOMMITED : commit이 되지 않은 데이터도 읽기를 허용
	    						dirty read : commit이 되지 않은 데이터를 읽어옴
	    						dirty read가 발생하기 때문에 잘 사용하지 않음.
	    		
	    		READ_COMMITED : commit이 끝난 데이터만 읽기를 허용
	    						한 트랜잭션 내에서 dml이 여러번 수행될 경우, 한번의 session 안에서 select 쿼리의 결과가 다르게 출력될 수 있다.
	    						non-repeatable read : 트랜잭션에서 동일한 select에 대한 결과가 다르게 나옴
	    						웹 개발에서는 READ_COMMITED 레벨을 가장 많이 사용
	    						
	    		REPEATABLE_READ : 세션이 진행되는 동안 동일한 select문의 결과를 보장
	    						세션이 생성되는 시점에, 현재 테이블의 상태를 저장하는 snap shot을 만들고
	    						해당 세션에서는 만들어진 snap shot에서만 데이터를 조회
	    						
	    		SERIALIZABLE	: select문이 진행되는 동안 데이터에 lock을 걸어
	    						트랜잭션이 진행되는 동안 수정 및 입력을 불가능하게 처리.
	    						성능이 매우 안 좋아서 잘 사용하지 않음.
    						
    						
    		propagation : 전파 속성
    			REQUIRED : 이미 진행 중인 트랜잭션이 있을 경우, 해당 트랜잭션에 포함 아니면 새로운 트랜잭션 생성
    			REQUIRES_NEW : 항상 새로운 트랜잭션을 생성
    			MANDATORY : 이미 진행 중인 트랜잭션이 있어야만 트랜잭션을 생성, 없으면 예외
    			NESTED	  : 진행 중인 트랜잭션이 있으면 중첩 트랜잭션을 발생
    						 중첩 트랜잭션 : 부모트랜잭션에서 commit, rollbcak시 중첩트랜잭션도 함께 commit, rollback
    										 중첩 트랜잭션에서 rollback을 할 경우, 중첩트랜잭션 안에서 발생한 수정만 rollback이 된다.
    			NEVER	 : 진행 중인 트랜잭션이 없어야만 작업을 수행, 있으면 예외
    			SUPPORTS : 진행 중인 트랜잭션이 있다면 포함, 없으면 트랜잭션을 생성하지 않음
    			
    		rollback-for : rollback을 하기 위한 예외클래의 이름을 등록
    			어떠 한 예외가 발생되더라도 반드시 rollback이 필요하기 때문에 Exception으로 등록
    	 -->
    
        <tx:attributes>
            <!--select로 시작하는 모든 메서드의 트랜잭션 격리 수준을 read-only로 설정
            	read-only : 읽기 전용, 해당 트랜잭션에서 dml이 발생하면 예외를 발생시킴  -->
            <tx:method name="select*" isolation="DEFAULT" read-only="true"/>
            <tx:method name="insert*" isolation="DEFAULT" rollback-for="Exception" propagation="REQUIRED"/>
            <tx:method name="update*" isolation="DEFAULT" rollback-for="Exception" propagation="REQUIRED"/>
            <tx:method name="delete*" isolation="DEFAULT" rollback-for="Exception" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    
    <tx:annotation-driven transaction-manager="txManager"/>

    <aop:config>
    	<!-- * *.*ServiceImpl.*(..))
    		모든 리턴타입, 모든 패키지, ServiceImpl로 끝나는 클래스의 모든 메서드(매개변수 상관없음)
    	 -->
        <aop:pointcut id="txPointCut" expression="execution(* com.mc.mvc..*.*ServiceImpl.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>
	
	<context:component-scan base-package="com.mc.mvc" />
	
	
	
</beans:beans>
