<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- namespace : 생성 될 프록시 객체의 타입  -->
<mapper namespace="com.mc.mvc.mybatis.repository.MybatisRepository">

	<!-- 
		#{} : preaparedStatement의 쿼리템플릿을 완성 시킨 뒤 파라미터값을 전달받아 쿼리를 완성한다.
			문자열 이스케이프처리가 되기 때문에, sqlInjection 공격으로 부터 안전하다.
		
		${} : preparedStatement의 쿼리템플릿이 생성되는 시점에 사용자로부터 전달받은 파라미터값을 사용해
			쿼리템플릿을 완성시킨다. 잘 사용하면 만능 if문 처럼 유용한 쿼리를 작성할 수 있지만
			잘 못 사용하면 sqlInjection 공격을 당할 수 있다.
	 -->
	<select id="dynamicIf" resultType="Book">
		select * from book
		where
		<if test="filter == 'title'">
			title like concat('%',#{keyword},'%')
		</if>
		<if test="filter == 'author'">
			author like concat('%',#{keyword},'%')
		</if>
	</select>
	
	<select id="dynamicChoose" resultType="Book">
		select * from book
		where
		<choose>
			<when test="filter == 'title'">
				title like concat('%',#{keyword},'%')
			</when>
			<otherwise>
				author like concat('%',#{keyword},'%')
			</otherwise>
		</choose>
	</select>
	
	<update id="dynamicSet">
		update member
		<set>
			<if test="password != null">
				password = #{password}
			</if>			
			<if test="tell != null">
				, tell = #{tell}
			</if>
			<if test="email != null">
				, email = #{email}
			</if>
		</set>
		where user_id = #{userId}
	</update>
	
	<insert id="dynamicForEach">
		insert into ${table}
		<foreach collection="data"  index="key" item="val" open="(" separator="," close=")">
			${key}		
		</foreach>
		values 
		<foreach collection="data"  index="key" item="val" open="(" separator="," close=")">
			#{val}		
		</foreach>
	</insert>
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


</mapper>